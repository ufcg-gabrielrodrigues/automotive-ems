component back_emf
    % Alternator Back EMF
    % Description.
    
    inputs
        i_f = { 0, 'A' };   % Excitation current:left
        n_r = { 0, 'rpm' };	% Rotor speed:left
    end
    outputs
        e_a = { 0, 'V' };	% Back EMF (phase A):right
        e_b = { 0, 'V' };	% Back EMF (phase B):right
        e_c = { 0, 'V' };	% Back EMF (phase C):right
    end
    parameters
        p = 1;	% Number of pole pairs
    end
    variables
        omega_r = { 0, 'rad/s' };       % Rotor speed
        omega_e = { 0, 'rad/s' };       % Alternator electrical frequency
        theta_e = { 0, 'rad' };         % Alternator electrical argument 
        k_e = { 0, 'V/((rad/s)*(A))' }  % Electrical coupling constant
        e = { 0, 'V' };                 % Back EMF peak
    end
    function setup
        if (floor(p) ~= p)
            error( 'Number of pole pairs must be integer' )
        end

        if (p <= 0)
            error( 'Number of pole pairs must be greater than zero' )
        end
    end
    equations
        omega_r == n_r;
        omega_e == p*omega_r;
        theta_e == integ(omega_e);
        k_e == { (sqrt(2.0).*((i_f*{1,'1/A'}).*4.7546e-3+(i_f*{1,'1/A'}).^2.*3.2418e-5-(i_f*{1,'1/A'}).^3.*2.6726e-4+(i_f*{1,'1/A'}).^4.*3.1552e-5-8.0134e-5).*1.193662073189215)./(i_f*{1,'1/A'}), 'V/((rad/s)*(A))' };
        e == k_e*omega_e*i_f;
        e_a == e*cos(theta_e);
        e_b == e*cos(theta_e + 2*pi/3);
        e_c == e*cos(theta_e - 2*pi/3);
    end
end